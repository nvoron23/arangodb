{
    "basePath": "/",
    "swaggerVersion": "1.1",
    "apiVersion": "0.1",
    "apis": [
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "If the transaction is fully executed and committed on the server, <em>HTTP 200</em> will be returned. <br><br>",
                            "code": "200"
                        },
                        {
                            "reason": "If the transaction specification is either missing or malformed, the server will respond with <em>HTTP 400</em>. <br><br>",
                            "code": "400"
                        },
                        {
                            "reason": "If the transaction specification contains an unknown collection, the server will respond with <em>HTTP 404</em>. <br><br>",
                            "code": "404"
                        },
                        {
                            "reason": "Exceptions thrown by users will make the server respond with a return code of <em>HTTP 500</em> <br><br>",
                            "code": "500"
                        }
                    ],
                    "parameters": [
                        {
                            "dataType": "String",
                            "paramType": "body",
                            "required": true,
                            "name": "body",
                            "description": "Contains the <em>collections</em> and <em>action</em>. <br><br>"
                        }
                    ],
                    "notes": "<br><br> The transaction description must be passed in the body of the POST request. <br><br> The following attributes must be specified inside the JSON object: <br><br>  <ul class=\"swagger-list\"><li><em>collections</em>: contains the array of collections to be used in the transaction (mandatory). <em>collections</em> must be a JSON object that can have the optional sub-attributes <em>read</em> and <em>write</em>. <em>read</em> and <em>write</em> must each be either arrays of collections names or strings with a single collection name.  <li><em>action</em>: the actual transaction operations to be executed, in the form of stringified JavaScript code. The code will be executed on server side, with late binding. It is thus critical that the code specified in <em>action</em> properly sets up all the variables it needs. If the code specified in <em>action</em> ends with a return statement, the value returned will also be returned by the REST API in the <em>result</em> attribute if the transaction committed successfully.  </ul> The following optional attributes may also be specified in the request: <br><br>  <ul class=\"swagger-list\"><li><em>waitForSync</em>: an optional boolean flag that, if set, will force the transaction to write all data to disk before returning.  <li><em>lockTimeout</em>: an optional numeric value that can be used to set a timeout for waiting on collection locks. If not specified, a default value will be used. Setting <em>lockTimeout</em> to <em>0</em> will make ArangoDB not time out waiting for a lock.  <li><em>params</em>: optional arguments passed to <em>action</em>.  </ul> If the transaction is fully executed and committed on the server, <em>HTTP 200</em> will be returned. Additionally, the return value of the code defined in <em>action</em> will be returned in the <em>result</em> attribute. <br><br> For successfully committed transactions, the returned JSON object has the following properties: <br><br>  <ul class=\"swagger-list\"><li><em>error</em>: boolean flag to indicate if an error occurred (<em>false</em> in this case)  <li><em>code</em>: the HTTP status code  <li><em>result</em>: the return value of the transaction  </ul> If the transaction specification is either missing or malformed, the server will respond with <em>HTTP 400</em>. <br><br> The body of the response will then contain a JSON object with additional error details. The object has the following attributes: <br><br>  <ul class=\"swagger-list\"><li><em>error</em>: boolean flag to indicate that an error occurred (<em>true</em> in this case)  <li><em>code</em>: the HTTP status code  <li><em>errorNum</em>: the server error number  <li><em>errorMessage</em>: a descriptive error message  </ul> If a transaction fails to commit, either by an exception thrown in the <em>action</em> code, or by an internal error, the server will respond with an error. Any other errors will be returned with any of the return codes <em>HTTP 400</em>, <em>HTTP 409</em>, or <em>HTTP 500</em>. <br><br>",
                    "summary": " Execute transaction",
                    "httpMethod": "POST",
                    "examples": "<br><br> Executing a transaction on a single collection: <br><br><br><br><pre><code class=\"json\">shell&gt; curl -X POST --data-binary @- --dump - http:<span class=\"hljs-comment\">//localhost:8529/_api/transaction &lt;&lt;EOF</span>\n{ \n  <span class=\"hljs-string\">\"collections\"</span> : { \n    <span class=\"hljs-string\">\"write\"</span> : <span class=\"hljs-string\">\"products\"</span> \n  }, \n  <span class=\"hljs-string\">\"action\"</span> : <span class=\"hljs-string\">\"function () { var db = require('internal').db; db.products.save({});  return db.products.count(); }\"</span> \n}\nEOF\n\nHTTP/<span class=\"hljs-number\">1.1</span> <span class=\"hljs-number\">200</span> OK\ncontent-type: application/json; charset=utf-<span class=\"hljs-number\">8</span>\n\n{ \n  <span class=\"hljs-string\">\"result\"</span> : <span class=\"hljs-number\">1</span>, \n  <span class=\"hljs-string\">\"error\"</span> : <span class=\"hljs-literal\">false</span>, \n  <span class=\"hljs-string\">\"code\"</span> : <span class=\"hljs-number\">200</span> \n}\n</code></pre><br><br><br> Executing a transaction using multiple collections: <br><br><br><br><pre><code class=\"json\">shell&gt; curl -X POST --data-binary @- --dump - http:<span class=\"hljs-comment\">//localhost:8529/_api/transaction &lt;&lt;EOF</span>\n{ \n  <span class=\"hljs-string\">\"collections\"</span> : { \n    <span class=\"hljs-string\">\"write\"</span> : [ \n      <span class=\"hljs-string\">\"products\"</span>, \n      <span class=\"hljs-string\">\"materials\"</span> \n    ] \n  }, \n  <span class=\"hljs-string\">\"action\"</span> : <span class=\"hljs-string\">\"function () {var db = require('internal').db;db.products.save({});db.materials.save({});return 'worked!';}\"</span> \n}\nEOF\n\nHTTP/<span class=\"hljs-number\">1.1</span> <span class=\"hljs-number\">200</span> OK\ncontent-type: application/json; charset=utf-<span class=\"hljs-number\">8</span>\n\n{ \n  <span class=\"hljs-string\">\"result\"</span> : <span class=\"hljs-string\">\"worked!\"</span>, \n  <span class=\"hljs-string\">\"error\"</span> : <span class=\"hljs-literal\">false</span>, \n  <span class=\"hljs-string\">\"code\"</span> : <span class=\"hljs-number\">200</span> \n}\n</code></pre><br><br><br> Aborting a transaction due to an internal error: <br><br><br><br><pre><code class=\"json\">shell&gt; curl -X POST --data-binary @- --dump - http:<span class=\"hljs-comment\">//localhost:8529/_api/transaction &lt;&lt;EOF</span>\n{ \n  <span class=\"hljs-string\">\"collections\"</span> : { \n    <span class=\"hljs-string\">\"write\"</span> : <span class=\"hljs-string\">\"products\"</span> \n  }, \n  <span class=\"hljs-string\">\"action\"</span> : <span class=\"hljs-string\">\"function () {var db = require('internal').db;db.products.save({ _key: 'abc'});db.products.save({ _key: 'abc'});}\"</span> \n}\nEOF\n\nHTTP/<span class=\"hljs-number\">1.1</span> <span class=\"hljs-number\">400</span> Bad Request\ncontent-type: application/json; charset=utf-<span class=\"hljs-number\">8</span>\n\n{ \n  <span class=\"hljs-string\">\"exception\"</span> : <span class=\"hljs-string\">\"[ArangoError 1210: unique constraint violated]\"</span>, \n  <span class=\"hljs-string\">\"stacktrace\"</span> : [ \n    <span class=\"hljs-string\">\"[ArangoError 1210: unique constraint violated]\"</span>, \n    <span class=\"hljs-string\">\"  at Error (native)\"</span>, \n    <span class=\"hljs-string\">\"  at eval (&lt;anonymous&gt;:1:99)\"</span>, \n    <span class=\"hljs-string\">\"  at eval (&lt;anonymous&gt;:1:122)\"</span>, \n    <span class=\"hljs-string\">\"  at post_api_transaction (js/actions/api-transaction.js:268:16)\"</span>, \n    <span class=\"hljs-string\">\"  at Function.actions.defineHttp.callback (js/actions/api-transaction.js:288:11)\"</span> \n  ], \n  <span class=\"hljs-string\">\"message\"</span> : <span class=\"hljs-string\">\"unique constraint violated\"</span>, \n  <span class=\"hljs-string\">\"error\"</span> : <span class=\"hljs-literal\">true</span>, \n  <span class=\"hljs-string\">\"code\"</span> : <span class=\"hljs-number\">400</span>, \n  <span class=\"hljs-string\">\"errorNum\"</span> : <span class=\"hljs-number\">1210</span>, \n  <span class=\"hljs-string\">\"errorMessage\"</span> : <span class=\"hljs-string\">\"unique constraint violated\"</span> \n}\n</code></pre><br><br><br> Aborting a transaction by explicitly throwing an exception: <br><br><br><br><pre><code class=\"json\">shell&gt; curl -X POST --data-binary @- --dump - http:<span class=\"hljs-comment\">//localhost:8529/_api/transaction &lt;&lt;EOF</span>\n{ \n  <span class=\"hljs-string\">\"collections\"</span> : { \n    <span class=\"hljs-string\">\"read\"</span> : <span class=\"hljs-string\">\"products\"</span> \n  }, \n  <span class=\"hljs-string\">\"action\"</span> : <span class=\"hljs-string\">\"function () { throw 'doh!'; }\"</span> \n}\nEOF\n\nHTTP/<span class=\"hljs-number\">1.1</span> <span class=\"hljs-number\">500</span> Internal <span class=\"hljs-built_in\">Error</span>\ncontent-type: application/json; charset=utf-<span class=\"hljs-number\">8</span>\n\n{ \n  <span class=\"hljs-string\">\"exception\"</span> : <span class=\"hljs-string\">\"doh!\"</span>, \n  <span class=\"hljs-string\">\"error\"</span> : <span class=\"hljs-literal\">true</span>, \n  <span class=\"hljs-string\">\"code\"</span> : <span class=\"hljs-number\">500</span>, \n  <span class=\"hljs-string\">\"errorNum\"</span> : <span class=\"hljs-number\">500</span>, \n  <span class=\"hljs-string\">\"errorMessage\"</span> : <span class=\"hljs-string\">\"internal server error\"</span> \n}\n</code></pre><br><br><br> Referring to a non-existing collection: <br><br><br><br><pre><code class=\"json\">shell&gt; curl -X POST --data-binary @- --dump - http:<span class=\"hljs-comment\">//localhost:8529/_api/transaction &lt;&lt;EOF</span>\n{ \n  <span class=\"hljs-string\">\"collections\"</span> : { \n    <span class=\"hljs-string\">\"read\"</span> : <span class=\"hljs-string\">\"products\"</span> \n  }, \n  <span class=\"hljs-string\">\"action\"</span> : <span class=\"hljs-string\">\"function () { return true; }\"</span> \n}\nEOF\n\nHTTP/<span class=\"hljs-number\">1.1</span> <span class=\"hljs-number\">404</span> Not Found\ncontent-type: application/json; charset=utf-<span class=\"hljs-number\">8</span>\n\n{ \n  <span class=\"hljs-string\">\"exception\"</span> : <span class=\"hljs-string\">\"[ArangoError 1203: collection not found]\"</span>, \n  <span class=\"hljs-string\">\"stacktrace\"</span> : [ \n    <span class=\"hljs-string\">\"[ArangoError 1203: collection not found]\"</span>, \n    <span class=\"hljs-string\">\"  at Error (native)\"</span>, \n    <span class=\"hljs-string\">\"  at post_api_transaction (js/actions/api-transaction.js:268:16)\"</span>, \n    <span class=\"hljs-string\">\"  at Function.actions.defineHttp.callback (js/actions/api-transaction.js:288:11)\"</span> \n  ], \n  <span class=\"hljs-string\">\"message\"</span> : <span class=\"hljs-string\">\"collection not found\"</span>, \n  <span class=\"hljs-string\">\"error\"</span> : <span class=\"hljs-literal\">true</span>, \n  <span class=\"hljs-string\">\"code\"</span> : <span class=\"hljs-number\">404</span>, \n  <span class=\"hljs-string\">\"errorNum\"</span> : <span class=\"hljs-number\">1203</span>, \n  <span class=\"hljs-string\">\"errorMessage\"</span> : <span class=\"hljs-string\">\"collection not found\"</span> \n}\n</code></pre><br><br><br>",
                    "nickname": "ExecuteTransaction"
                }
            ],
            "path": "/_api/transaction"
        }
    ]
}
