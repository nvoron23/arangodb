{
    "basePath": "/",
    "swaggerVersion": "1.1",
    "apiVersion": "0.1",
    "apis": [
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "Is returned if the operation succeeds. <br><br>",
                            "code": "200"
                        },
                        {
                            "reason": "is returned when an invalid HTTP method is used. <br><br>",
                            "code": "405"
                        }
                    ],
                    "parameters": [
                        {
                            "dataType": "Boolean",
                            "paramType": "path",
                            "required": false,
                            "name": "waitForSync",
                            "description": "Whether or not the operation should block until the not-yet synchronized data in the write-ahead log was synchronized to disk. <br><br>"
                        },
                        {
                            "dataType": "Boolean",
                            "paramType": "path",
                            "required": false,
                            "name": "waitForCollector",
                            "description": "Whether or not the operation should block until the data in the flushed log has been collected by the write-ahead log garbage collector. Note that setting this option to <em>true</em> might block for a long time if there are long-running transactions and the write-ahead log garbage collector cannot finish garbage collection. <br><br>"
                        }
                    ],
                    "notes": "<br><br> Flushes the write-ahead log. By flushing the currently active write-ahead logfile, the data in it can be transferred to collection journals and datafiles. This is useful to ensure that all data for a collection is present in the collection journals and datafiles, for example, when dumping the data of a collection. <br><br>",
                    "summary": " Flushes the write-ahead log",
                    "httpMethod": "PUT",
                    "examples": "",
                    "nickname": "FlushesTheWrite-aheadLog"
                }
            ],
            "path": "/_admin/wal/flush"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "Is returned if the operation succeeds. <br><br>",
                            "code": "200"
                        },
                        {
                            "reason": "is returned when an invalid HTTP method is used. <br><br> <br><br>",
                            "code": "405"
                        }
                    ],
                    "parameters": [],
                    "notes": "<br><br> Configures the behavior of the write-ahead log. The body of the request must be a JSON object with the following attributes:  <ul class=\"swagger-list\"><li><em>allowOversizeEntries</em>: whether or not operations that are bigger than a single logfile can be executed and stored <li><em>logfileSize</em>: the size of each write-ahead logfile <li><em>historicLogfiles</em>: the maximum number of historic logfiles to keep <li><em>reserveLogfiles</em>: the maximum number of reserve logfiles that ArangoDB allocates in the background <li><em>throttleWait</em>: the maximum wait time that operations will wait before they get aborted if case of write-throttling (in milliseconds) <li><em>throttleWhenPending</em>: the number of unprocessed garbage-collection operations that, when reached, will activate write-throttling. A value of <em>0</em> means that write-throttling will not be triggered.  </ul> Specifying any of the above attributes is optional. Not specified attributes will be ignored and the configuration for them will not be modified. <br><br>",
                    "summary": " Configures the write-ahead log",
                    "httpMethod": "PUT",
                    "examples": "<br><br><br><br><pre><code class=\"json\">shell&gt; curl -X PUT --data-binary @- --dump - http:<span class=\"hljs-comment\">//localhost:8529/_admin/wal/properties &lt;&lt;EOF</span>\n{<span class=\"hljs-string\">\"logfileSize\"</span>:<span class=\"hljs-number\">33554432</span>,<span class=\"hljs-string\">\"allowOversizeEntries\"</span>:<span class=\"hljs-literal\">true</span>}\nEOF\n\nHTTP/<span class=\"hljs-number\">1.1</span> <span class=\"hljs-number\">200</span> OK\ncontent-type: application/json; charset=utf-<span class=\"hljs-number\">8</span>\n\n{ \n  <span class=\"hljs-string\">\"allowOversizeEntries\"</span> : <span class=\"hljs-literal\">true</span>, \n  <span class=\"hljs-string\">\"logfileSize\"</span> : <span class=\"hljs-number\">33554432</span>, \n  <span class=\"hljs-string\">\"historicLogfiles\"</span> : <span class=\"hljs-number\">10</span>, \n  <span class=\"hljs-string\">\"reserveLogfiles\"</span> : <span class=\"hljs-number\">1</span>, \n  <span class=\"hljs-string\">\"syncInterval\"</span> : <span class=\"hljs-number\">100</span>, \n  <span class=\"hljs-string\">\"throttleWait\"</span> : <span class=\"hljs-number\">15000</span>, \n  <span class=\"hljs-string\">\"throttleWhenPending\"</span> : <span class=\"hljs-number\">0</span>, \n  <span class=\"hljs-string\">\"error\"</span> : <span class=\"hljs-literal\">false</span>, \n  <span class=\"hljs-string\">\"code\"</span> : <span class=\"hljs-number\">200</span> \n}\n</code></pre><br><br><br>",
                    "nickname": "ConfiguresTheWrite-aheadLog"
                }
            ],
            "path": "/_admin/wal/properties"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "Is returned if the operation succeeds. <br><br>",
                            "code": "200"
                        },
                        {
                            "reason": "is returned when an invalid HTTP method is used. <br><br> <br><br>",
                            "code": "405"
                        }
                    ],
                    "parameters": [],
                    "notes": "<br><br> Retrieves the configuration of the write-ahead log. The result is a JSON object with the following attributes:  <ul class=\"swagger-list\"><li><em>allowOversizeEntries</em>: whether or not operations that are bigger than a single logfile can be executed and stored <li><em>logfileSize</em>: the size of each write-ahead logfile <li><em>historicLogfiles</em>: the maximum number of historic logfiles to keep <li><em>reserveLogfiles</em>: the maximum number of reserve logfiles that ArangoDB allocates in the background <li><em>syncInterval</em>: the interval for automatic synchronization of not-yet synchronized write-ahead log data (in milliseconds) <li><em>throttleWait</em>: the maximum wait time that operations will wait before they get aborted if case of write-throttling (in milliseconds) <li><em>throttleWhenPending</em>: the number of unprocessed garbage-collection operations that, when reached, will activate write-throttling. A value of <em>0</em> means that write-throttling will not be triggered.",
                    "summary": " Retrieves the configuration of the write-ahead log",
                    "httpMethod": "GET",
                    "examples": "<br><br><br><br><pre><code class=\"json\">shell&gt; curl --dump - http:<span class=\"hljs-comment\">//localhost:8529/_admin/wal/properties</span>\n\nHTTP/<span class=\"hljs-number\">1.1</span> <span class=\"hljs-number\">200</span> OK\ncontent-type: application/json; charset=utf-<span class=\"hljs-number\">8</span>\n\n{ \n  <span class=\"hljs-string\">\"allowOversizeEntries\"</span> : <span class=\"hljs-literal\">true</span>, \n  <span class=\"hljs-string\">\"logfileSize\"</span> : <span class=\"hljs-number\">33554432</span>, \n  <span class=\"hljs-string\">\"historicLogfiles\"</span> : <span class=\"hljs-number\">10</span>, \n  <span class=\"hljs-string\">\"reserveLogfiles\"</span> : <span class=\"hljs-number\">1</span>, \n  <span class=\"hljs-string\">\"syncInterval\"</span> : <span class=\"hljs-number\">100</span>, \n  <span class=\"hljs-string\">\"throttleWait\"</span> : <span class=\"hljs-number\">15000</span>, \n  <span class=\"hljs-string\">\"throttleWhenPending\"</span> : <span class=\"hljs-number\">0</span>, \n  <span class=\"hljs-string\">\"error\"</span> : <span class=\"hljs-literal\">false</span>, \n  <span class=\"hljs-string\">\"code\"</span> : <span class=\"hljs-number\">200</span> \n}\n</code></pre><br><br><br>",
                    "nickname": "RetrievesTheConfigurationOfTheWrite-aheadLog"
                }
            ],
            "path": "/_admin/wal/properties"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "Is returned if the operation succeeds. <br><br>",
                            "code": "200"
                        },
                        {
                            "reason": "is returned when an invalid HTTP method is used. <br><br> <br><br>",
                            "code": "405"
                        }
                    ],
                    "parameters": [],
                    "notes": "<br><br> Returns information about the currently running transactions. The result is a JSON object with the following attributes:  <ul class=\"swagger-list\"><li><em>runningTransactions</em>: number of currently running transactions <li><em>minLastCollected</em>: minimum id of the last collected logfile (at the start of each running transaction). This is <em>null</em> if no transaction is running. <li><em>minLastSealed</em>: minimum id of the last sealed logfile (at the start of each running transaction). This is <em>null</em> if no transaction is running.",
                    "summary": " Returns information about the currently running transactions",
                    "httpMethod": "GET",
                    "examples": "<br><br><br><br><pre><code class=\"json\">shell&gt; curl --dump - http:<span class=\"hljs-comment\">//localhost:8529/_admin/wal/transactions</span>\n\nHTTP/<span class=\"hljs-number\">1.1</span> <span class=\"hljs-number\">200</span> OK\ncontent-type: application/json; charset=utf-<span class=\"hljs-number\">8</span>\n\n{ \n  <span class=\"hljs-string\">\"runningTransactions\"</span> : <span class=\"hljs-number\">0</span>, \n  <span class=\"hljs-string\">\"minLastCollected\"</span> : <span class=\"hljs-literal\">null</span>, \n  <span class=\"hljs-string\">\"minLastSealed\"</span> : <span class=\"hljs-literal\">null</span>, \n  <span class=\"hljs-string\">\"error\"</span> : <span class=\"hljs-literal\">false</span>, \n  <span class=\"hljs-string\">\"code\"</span> : <span class=\"hljs-number\">200</span> \n}\n</code></pre><br><br><br>",
                    "nickname": "ReturnsInformationAboutTheCurrentlyRunningTransactions"
                }
            ],
            "path": "/_admin/wal/transactions"
        }
    ]
}
