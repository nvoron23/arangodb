{
    "basePath": "/",
    "swaggerVersion": "1.1",
    "apiVersion": "0.1",
    "apis": [
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "Is returned when the list of queries can be retrieved successfully. <br><br>",
                            "code": "200"
                        },
                        {
                            "reason": "The server will respond with <em>HTTP 400</em> in case of a malformed request, <br><br> <br><br>",
                            "code": "400"
                        }
                    ],
                    "parameters": [],
                    "notes": "",
                    "summary": " Returns the properties for the AQL query tracking",
                    "httpMethod": "GET",
                    "examples": "",
                    "nickname": "ReturnsThePropertiesForTheAqlQueryTracking"
                }
            ],
            "path": "/_api/query/properties"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "Is returned when the list of queries can be retrieved successfully. <br><br>",
                            "code": "200"
                        },
                        {
                            "reason": "The server will respond with <em>HTTP 400</em> in case of a malformed request, <br><br> <br><br>",
                            "code": "400"
                        }
                    ],
                    "parameters": [],
                    "notes": "",
                    "summary": " Returns the currently running AQL queries",
                    "httpMethod": "GET",
                    "examples": "",
                    "nickname": "ReturnsTheCurrentlyRunningAqlQueries"
                }
            ],
            "path": "/_api/query/current"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "Is returned when the list of queries can be retrieved successfully. <br><br>",
                            "code": "200"
                        },
                        {
                            "reason": "The server will respond with <em>HTTP 400</em> in case of a malformed request, <br><br> <br><br>",
                            "code": "400"
                        }
                    ],
                    "parameters": [],
                    "notes": "",
                    "summary": " Returns the list of slow AQL queries",
                    "httpMethod": "GET",
                    "examples": "",
                    "nickname": "ReturnsTheListOfSlowAqlQueries"
                }
            ],
            "path": "/_api/query/slow"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "The server will respond with <em>HTTP 200</em> when the list of queries was cleared successfully. <br><br>",
                            "code": "204"
                        },
                        {
                            "reason": "The server will respond with <em>HTTP 400</em> in case of a malformed request. <br><br>",
                            "code": "400"
                        }
                    ],
                    "parameters": [],
                    "notes": "",
                    "summary": " Clears the list of slow AQL queries",
                    "httpMethod": "DELETE",
                    "examples": "",
                    "nickname": "ClearsTheListOfSlowAqlQueries"
                }
            ],
            "path": "/_api/query/slow"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "The server will respond with <em>HTTP 200</em> when the query was still running when the kill request was executed and the query's kill flag was set. <br><br>",
                            "code": "200"
                        },
                        {
                            "reason": "The server will respond with <em>HTTP 400</em> in case of a malformed request. <br><br>",
                            "code": "400"
                        },
                        {
                            "reason": "The server will respond with <em>HTTP 404</em> when no query with the specified id was found. <br><br>",
                            "code": "404"
                        }
                    ],
                    "parameters": [
                        {
                            "dataType": "String",
                            "paramType": "path",
                            "required": true,
                            "name": "query-id",
                            "description": "The id of the query. <br><br> Kills a running query. The query will be terminated at the next cancellation point. <br><br>"
                        }
                    ],
                    "notes": "",
                    "summary": " Kills a running AQL query",
                    "httpMethod": "DELETE",
                    "examples": "",
                    "nickname": "KillsARunningAqlQuery"
                }
            ],
            "path": "/_api/query/{query-id}"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "Is returned if the properties were changed successfully. <br><br>",
                            "code": "200"
                        },
                        {
                            "reason": "The server will respond with <em>HTTP 400</em> in case of a malformed request, <br><br> <br><br>",
                            "code": "400"
                        }
                    ],
                    "parameters": [
                        {
                            "dataType": "Json",
                            "paramType": "body",
                            "required": true,
                            "name": "properties",
                            "description": "The properties for query tracking in the current database.  <br><br> The properties need to be passed in the attribute <em>properties</em> in the body of the HTTP request. <em>properties</em> needs to be a JSON object with the following properties: <br><br>  <ul class=\"swagger-list\"><li><em>enabled</em>: if set to <em>true</em>, then queries will be tracked. If set to  <em>false</em>, neither queries nor slow queries will be tracked.  <li><em>trackSlowQueries</em>: if set to <em>true</em>, then slow queries will be tracked in the list of slow queries if their runtime exceeds the value set in  <em>slowQueryThreshold</em>. In order for slow queries to be tracked, the <em>enabled</em> property must also be set to <em>true</em>.  <li><em>maxSlowQueries</em>: the maximum number of slow queries to keep in the list of slow queries. If the list of slow queries is full, the oldest entry in it will be discarded when additional slow queries occur.  <li><em>slowQueryThreshold</em>: the threshold value for treating a query as slow. A query with a runtime greater or equal to this threshold value will be put into the list of slow queries when slow query tracking is enabled. The value for <em>slowQueryThreshold</em> is specified in seconds.  <li><em>maxQueryStringLength</em>: the maximum query string length to keep in the list of queries. Query strings can have arbitrary lengths, and this property can be used to save memory in case very long query strings are used. The value is specified in bytes.  </ul> After the properties have been changed, the current set of properties will be returned in the HTTP response. <br><br>"
                        }
                    ],
                    "notes": "",
                    "summary": " Changes the properties for the AQL query tracking",
                    "httpMethod": "PUT",
                    "examples": "",
                    "nickname": "ChangesThePropertiesForTheAqlQueryTracking"
                }
            ],
            "path": "/_api/query/properties"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "If the query is valid, the server will respond with <em>HTTP 200</em> and return the names of the bind parameters it found in the query (if any) in the <em>bindVars</em> attribute of the response. It will also return an array of the collections used in the query in the <em>collections</em> attribute.  If a query can be parsed successfully, the <em>ast</em> attribute of the returned JSON will contain the abstract syntax tree representation of the query. The format of the <em>ast</em> is subject to change in future versions of  ArangoDB, but it can be used to inspect how ArangoDB interprets a given query. Note that the abstract syntax tree will be returned without any optimizations applied to it. <br><br>",
                            "code": "200"
                        },
                        {
                            "reason": "The server will respond with <em>HTTP 400</em> in case of a malformed request, or if the query contains a parse error. The body of the response will contain the error details embedded in a JSON object. <br><br>",
                            "code": "400"
                        }
                    ],
                    "parameters": [
                        {
                            "dataType": "Json",
                            "paramType": "body",
                            "required": true,
                            "name": "query",
                            "description": "To validate a query string without executing it, the query string can be passed to the server via an HTTP POST request. <br><br> The query string needs to be passed in the attribute <em>query</em> of a JSON object as the body of the POST request. <br><br>"
                        }
                    ],
                    "notes": "",
                    "summary": " Parse an AQL query",
                    "httpMethod": "POST",
                    "examples": "<br><br> Valid query: <br><br><br><br><pre><code class=\"json\">shell&gt; curl -X POST --data-binary @- --dump - http:<span class=\"hljs-comment\">//localhost:8529/_api/query &lt;&lt;EOF</span>\n{ <span class=\"hljs-string\">\"query\"</span> : <span class=\"hljs-string\">\"FOR p IN products FILTER p.name == @name LIMIT 2 RETURN p.n\"</span> }\nEOF\n\nHTTP/<span class=\"hljs-number\">1.1</span> <span class=\"hljs-number\">200</span> OK\ncontent-type: application/json; charset=utf-<span class=\"hljs-number\">8</span>\n\n{ \n  <span class=\"hljs-string\">\"error\"</span> : <span class=\"hljs-literal\">false</span>, \n  <span class=\"hljs-string\">\"code\"</span> : <span class=\"hljs-number\">200</span>, \n  <span class=\"hljs-string\">\"parsed\"</span> : <span class=\"hljs-literal\">true</span>, \n  <span class=\"hljs-string\">\"collections\"</span> : [ \n    <span class=\"hljs-string\">\"products\"</span> \n  ], \n  <span class=\"hljs-string\">\"bindVars\"</span> : [ \n    <span class=\"hljs-string\">\"name\"</span> \n  ], \n  <span class=\"hljs-string\">\"ast\"</span> : [ \n    { \n      <span class=\"hljs-string\">\"type\"</span> : <span class=\"hljs-string\">\"root\"</span>, \n      <span class=\"hljs-string\">\"subNodes\"</span> : [ \n        { \n          <span class=\"hljs-string\">\"type\"</span> : <span class=\"hljs-string\">\"for\"</span>, \n          <span class=\"hljs-string\">\"subNodes\"</span> : [ \n            { \n              <span class=\"hljs-string\">\"type\"</span> : <span class=\"hljs-string\">\"variable\"</span>, \n              <span class=\"hljs-string\">\"name\"</span> : <span class=\"hljs-string\">\"p\"</span>, \n              <span class=\"hljs-string\">\"id\"</span> : <span class=\"hljs-number\">0</span> \n            }, \n            { \n              <span class=\"hljs-string\">\"type\"</span> : <span class=\"hljs-string\">\"collection\"</span>, \n              <span class=\"hljs-string\">\"name\"</span> : <span class=\"hljs-string\">\"products\"</span> \n            } \n          ] \n        }, \n        { \n          <span class=\"hljs-string\">\"type\"</span> : <span class=\"hljs-string\">\"filter\"</span>, \n          <span class=\"hljs-string\">\"subNodes\"</span> : [ \n            { \n              <span class=\"hljs-string\">\"type\"</span> : <span class=\"hljs-string\">\"compare ==\"</span>, \n              <span class=\"hljs-string\">\"subNodes\"</span> : [ \n                { \n                  <span class=\"hljs-string\">\"type\"</span> : <span class=\"hljs-string\">\"attribute access\"</span>, \n                  <span class=\"hljs-string\">\"name\"</span> : <span class=\"hljs-string\">\"name\"</span>, \n                  <span class=\"hljs-string\">\"subNodes\"</span> : [ \n                    { \n                      <span class=\"hljs-string\">\"type\"</span> : <span class=\"hljs-string\">\"reference\"</span>, \n                      <span class=\"hljs-string\">\"name\"</span> : <span class=\"hljs-string\">\"p\"</span>, \n                      <span class=\"hljs-string\">\"id\"</span> : <span class=\"hljs-number\">0</span> \n                    } \n                  ] \n                }, \n                { \n                  <span class=\"hljs-string\">\"type\"</span> : <span class=\"hljs-string\">\"parameter\"</span>, \n                  <span class=\"hljs-string\">\"name\"</span> : <span class=\"hljs-string\">\"name\"</span> \n                } \n              ] \n            } \n          ] \n        }, \n        { \n          <span class=\"hljs-string\">\"type\"</span> : <span class=\"hljs-string\">\"limit\"</span>, \n          <span class=\"hljs-string\">\"subNodes\"</span> : [ \n            { \n              <span class=\"hljs-string\">\"type\"</span> : <span class=\"hljs-string\">\"value\"</span>, \n              <span class=\"hljs-string\">\"value\"</span> : <span class=\"hljs-number\">0</span> \n            }, \n            { \n              <span class=\"hljs-string\">\"type\"</span> : <span class=\"hljs-string\">\"value\"</span>, \n              <span class=\"hljs-string\">\"value\"</span> : <span class=\"hljs-number\">2</span> \n            } \n          ] \n        }, \n        { \n          <span class=\"hljs-string\">\"type\"</span> : <span class=\"hljs-string\">\"return\"</span>, \n          <span class=\"hljs-string\">\"subNodes\"</span> : [ \n            { \n              <span class=\"hljs-string\">\"type\"</span> : <span class=\"hljs-string\">\"attribute access\"</span>, \n              <span class=\"hljs-string\">\"name\"</span> : <span class=\"hljs-string\">\"n\"</span>, \n              <span class=\"hljs-string\">\"subNodes\"</span> : [ \n                { \n                  <span class=\"hljs-string\">\"type\"</span> : <span class=\"hljs-string\">\"reference\"</span>, \n                  <span class=\"hljs-string\">\"name\"</span> : <span class=\"hljs-string\">\"p\"</span>, \n                  <span class=\"hljs-string\">\"id\"</span> : <span class=\"hljs-number\">0</span> \n                } \n              ] \n            } \n          ] \n        } \n      ] \n    } \n  ], \n  <span class=\"hljs-string\">\"warnings\"</span> : [ ] \n}\n</code></pre><br><br><br> Invalid query: <br><br><br><br><pre><code class=\"json\">shell&gt; curl -X POST --data-binary @- --dump - http:<span class=\"hljs-comment\">//localhost:8529/_api/query &lt;&lt;EOF</span>\n{ <span class=\"hljs-string\">\"query\"</span> : <span class=\"hljs-string\">\"FOR p IN products FILTER p.name = @name LIMIT 2 RETURN p.n\"</span> }\nEOF\n\nHTTP/<span class=\"hljs-number\">1.1</span> <span class=\"hljs-number\">400</span> Bad Request\ncontent-type: application/json; charset=utf-<span class=\"hljs-number\">8</span>\n\n{ \n  <span class=\"hljs-string\">\"error\"</span> : <span class=\"hljs-literal\">true</span>, \n  <span class=\"hljs-string\">\"errorMessage\"</span> : <span class=\"hljs-string\">\"syntax error, unexpected assignment near '= @name LIMIT 2 RETURN p.n' at position 1:33\"</span>, \n  <span class=\"hljs-string\">\"code\"</span> : <span class=\"hljs-number\">400</span>, \n  <span class=\"hljs-string\">\"errorNum\"</span> : <span class=\"hljs-number\">1501</span> \n}\n</code></pre><br><br><br>",
                    "nickname": "ParseAnAqlQuery"
                }
            ],
            "path": "/_api/query"
        }
    ]
}
