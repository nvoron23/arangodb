{
    "basePath": "/",
    "swaggerVersion": "1.1",
    "apiVersion": "0.1",
    "apis": [
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "is returned if the document was created successfully and <em>waitForSync</em> was <em>true</em>. <br><br>",
                            "code": "201"
                        },
                        {
                            "reason": "is returned if the document was created successfully and <em>waitForSync</em> was <em>false</em>. <br><br>",
                            "code": "202"
                        },
                        {
                            "reason": "is returned if the body does not contain a valid JSON representation of a document. The response body contains an error document in this case. <br><br>",
                            "code": "400"
                        },
                        {
                            "reason": "is returned if the collection specified by <em>collection</em> is unknown.  The response body contains an error document in this case. <br><br>",
                            "code": "404"
                        }
                    ],
                    "parameters": [
                        {
                            "dataType": "Json",
                            "paramType": "body",
                            "required": true,
                            "name": "document",
                            "description": "A JSON representation of the document. <br><br>"
                        },
                        {
                            "dataType": "String",
                            "paramType": "query",
                            "required": true,
                            "name": "collection",
                            "description": "The collection name. <br><br>"
                        },
                        {
                            "dataType": "Boolean",
                            "paramType": "query",
                            "required": false,
                            "name": "createCollection",
                            "description": "If this parameter has a value of <em>true</em> or <em>yes</em>, then the collection is created if it does not yet exist. Other values will be ignored so the collection must be present for the operation to succeed. <br><br> <em>Note</em>: this flag is not supported in a cluster. Using it will result in an error. <br><br>"
                        },
                        {
                            "dataType": "Boolean",
                            "paramType": "query",
                            "required": false,
                            "name": "waitForSync",
                            "description": "Wait until document has been synced to disk. <br><br>"
                        }
                    ],
                    "notes": "Creates a new document in the collection named <em>collection</em>.  A JSON representation of the document must be passed as the body of the POST request. <br><br> If the document was created successfully, then the \"Location\" header contains the path to the newly created document. The \"ETag\" header field contains the revision of the document. <br><br> The body of the response contains a JSON object with the following attributes: <br><br>  <ul class=\"swagger-list\"><li><em>_id</em> contains the document handle of the newly created document <li><em>_key</em> contains the document key <li><em>_rev</em> contains the document revision  </ul> If the collection parameter <em>waitForSync</em> is <em>false</em>, then the call returns as soon as the document has been accepted. It will not wait until the document has been synced to disk. <br><br> Optionally, the URL parameter <em>waitForSync</em> can be used to force synchronisation of the document creation operation to disk even in case that the <em>waitForSync</em> flag had been disabled for the entire collection.  Thus, the <em>waitForSync</em> URL parameter can be used to force synchronisation of just this specific operations. To use this, set the <em>waitForSync</em> parameter to <em>true</em>. If the <em>waitForSync</em> parameter is not specified or set to <em>false</em>, then the collection's default <em>waitForSync</em> behavior is applied. The <em>waitForSync</em> URL parameter cannot be used to disable synchronisation for collections that have a default <em>waitForSync</em> value of <em>true</em>. <br><br>",
                    "summary": "Create document",
                    "httpMethod": "POST",
                    "examples": "<br><br> Create a document given a collection named <em>products</em>. Note that the revision identifier might or might not by equal to the auto-generated key. <br><br><br><br><pre><code class=\"json\">shell&gt; curl -X POST --data-binary @- --dump - http://localhost:8529/_api/document?collection=products &lt;&lt;EOF\n{ \"Hello\": \"World\" }\nEOF\n\nHTTP/1.1 201 Created\ncontent-type: application/json; charset=utf-8\netag: \"1656542587\"\nlocation: /_db/_system/_api/document/products/1656542587\n\n{ \n  \"error\" : false, \n  \"_id\" : \"products/1656542587\", \n  \"_rev\" : \"1656542587\", \n  \"_key\" : \"1656542587\" \n}\n</code></pre><br><br><br> Create a document in a collection named <em>products</em> with a collection-level <em>waitForSync</em> value of <em>false</em>. <br><br><br><br><pre><code class=\"json\">shell&gt; curl -X POST --data-binary @- --dump - http://localhost:8529/_api/document?collection=products &lt;&lt;EOF\n{ \"Hello\": \"World\" }\nEOF\n\nHTTP/1.1 202 Accepted\ncontent-type: application/json; charset=utf-8\netag: \"1657066875\"\nlocation: /_db/_system/_api/document/products/1657066875\n\n{ \n  \"error\" : false, \n  \"_id\" : \"products/1657066875\", \n  \"_rev\" : \"1657066875\", \n  \"_key\" : \"1657066875\" \n}\n</code></pre><br><br><br> Create a document in a collection with a collection-level <em>waitForSync</em> value of <em>false</em>, but using the <em>waitForSync</em> URL parameter. <br><br><br><br><pre><code class=\"json\">shell&gt; curl -X POST --data-binary @- --dump - http://localhost:8529/_api/document?collection=products&amp;waitForSync=true &lt;&lt;EOF\n{ \"Hello\": \"World\" }\nEOF\n\nHTTP/1.1 201 Created\ncontent-type: application/json; charset=utf-8\netag: \"1657591163\"\nlocation: /_db/_system/_api/document/products/1657591163\n\n{ \n  \"error\" : false, \n  \"_id\" : \"products/1657591163\", \n  \"_rev\" : \"1657591163\", \n  \"_key\" : \"1657591163\" \n}\n</code></pre><br><br><br> Create a document in a new, named collection <br><br><br><br><pre><code class=\"json\">shell&gt; curl -X POST --data-binary @- --dump - http://localhost:8529/_api/document?collection=products&amp;createCollection=true &lt;&lt;EOF\n{ \"Hello\": \"World\" }\nEOF\n\nHTTP/1.1 202 Accepted\ncontent-type: application/json; charset=utf-8\netag: \"1658115451\"\nlocation: /_db/_system/_api/document/products/1658115451\n\n{ \n  \"error\" : false, \n  \"_id\" : \"products/1658115451\", \n  \"_rev\" : \"1658115451\", \n  \"_key\" : \"1658115451\" \n}\n</code></pre><br><br><br> Unknown collection name: <br><br><br><br><pre><code class=\"json\">shell&gt; curl -X POST --data-binary @- --dump - http://localhost:8529/_api/document?collection=products &lt;&lt;EOF\n{ \"Hello\": \"World\" }\nEOF\n\nHTTP/1.1 404 Not Found\ncontent-type: application/json; charset=utf-8\n\n{ \n  \"error\" : true, \n  \"errorMessage\" : \"collection 'products' not found\", \n  \"code\" : 404, \n  \"errorNum\" : 1203 \n}\n</code></pre><br><br><br> Illegal document: <br><br><br><br><pre><code class=\"json\">shell&gt; curl -X POST --data-binary @- --dump - http://localhost:8529/_api/document?collection=products &lt;&lt;EOF\n{ 1: \"World\" }\nEOF\n\nHTTP/1.1 400 Bad Request\ncontent-type: application/json; charset=utf-8\n\n{ \n  \"error\" : true, \n  \"errorMessage\" : \"expecting attribute name\", \n  \"code\" : 400, \n  \"errorNum\" : 600 \n}\n</code></pre><br><br><br>",
                    "nickname": "CreateDocument"
                }
            ],
            "path": "/_api/document"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "is returned if the document was found <br><br>",
                            "code": "200"
                        },
                        {
                            "reason": "is returned if the \"If-None-Match\" header is given and the document has the same version <br><br>",
                            "code": "304"
                        },
                        {
                            "reason": "is returned if the document or collection was not found <br><br>",
                            "code": "404"
                        },
                        {
                            "reason": "is returned if a \"If-Match\" header or <em>rev</em> is given and the found document has a different version. The response will also contain the found document's current revision in the <em>_rev</em> attribute. Additionally, the attributes <em>_id</em> and <em>_key</em> will be returned. <br><br>",
                            "code": "412"
                        }
                    ],
                    "parameters": [
                        {
                            "dataType": "String",
                            "paramType": "path",
                            "required": true,
                            "name": "document-handle",
                            "description": "The handle of the document. <br><br>"
                        },
                        {
                            "dataType": "String",
                            "paramType": "header",
                            "name": "If-None-Match",
                            "description": "If the \"If-None-Match\" header is given, then it must contain exactly one etag. The document is returned, if it has a different revision than the given etag. Otherwise an <em>HTTP 304</em> is returned. <br><br>"
                        },
                        {
                            "dataType": "String",
                            "paramType": "header",
                            "name": "If-Match",
                            "description": "If the \"If-Match\" header is given, then it must contain exactly one etag. The document is returned, if it has the same revision as the given etag. Otherwise a <em>HTTP 412</em> is returned. As an alternative you can supply the etag in an attribute <em>rev</em> in the URL. <br><br>"
                        }
                    ],
                    "notes": "Returns the document identified by <em>document-handle</em>. The returned document contains three special attributes: <em>_id</em> containing the document handle, <em>_key</em> containing key which uniquely identifies a document in a given collection and <em>_rev</em> containing the revision. <br><br>",
                    "summary": "Read document",
                    "httpMethod": "GET",
                    "examples": "<br><br> Use a document handle: <br><br><br><br><pre><code class=\"json\">shell&gt; curl --dump - http://localhost:8529/_api/document/products/1658639739\n\nHTTP/1.1 200 OK\ncontent-type: application/json; charset=utf-8\netag: \"1658639739\"\n\n{ \n  \"hello\" : \"world\", \n  \"_id\" : \"products/1658639739\", \n  \"_rev\" : \"1658639739\", \n  \"_key\" : \"1658639739\" \n}\n</code></pre><br><br><br> Use a document handle and an etag: <br><br><br><br><pre><code class=\"json\">shell&gt; curl --header 'If-None-Match: \"1659229563\"' --dump - http://localhost:8529/_api/document/products/1659229563\n\n</code></pre><br><br><br> Unknown document handle: <br><br><br><br><pre><code class=\"json\">shell&gt; curl --dump - http://localhost:8529/_api/document/products/unknownhandle\n\nHTTP/1.1 404 Not Found\ncontent-type: application/json; charset=utf-8\n\n{ \n  \"error\" : true, \n  \"errorMessage\" : \"collection 'products' not found\", \n  \"code\" : 404, \n  \"errorNum\" : 1203 \n}\n</code></pre><br><br><br>",
                    "nickname": "ReadDocument"
                }
            ],
            "path": "/_api/document/{document-handle}"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "All went good. <br><br>",
                            "code": "200"
                        },
                        {
                            "reason": "The collection does not exist. <br><br>",
                            "code": "404"
                        }
                    ],
                    "parameters": [
                        {
                            "dataType": "String",
                            "paramType": "query",
                            "required": true,
                            "name": "collection",
                            "description": "The name of the collection. <br><br>"
                        },
                        {
                            "dataType": "String",
                            "paramType": "query",
                            "required": false,
                            "name": "type",
                            "description": "The type of the result. The following values are allowed: <br><br>  <ul class=\"swagger-list\"><li><em>id</em>: returns an array of document ids (<em>_id</em> attributes) <li><em>key</em>: returns an array of document keys (<em>_key</em> attributes) <li><em>path</em>: returns an array of document URI paths. This is the default."
                        }
                    ],
                    "notes": "Returns an array of all keys, ids, or URI paths for all documents in the  collection identified by <em>collection</em>. The type of the result array is determined by the <em>type</em> attribute. <br><br> Note that the results have no defined order and thus the order should not be relied on. <br><br>",
                    "summary": "Read all documents",
                    "httpMethod": "GET",
                    "examples": "<br><br> Returns all document paths <br><br><br><br><pre><code class=\"json\">shell&gt; curl --dump - http://localhost:8529/_api/document/?collection=products\n\nHTTP/1.1 200 OK\ncontent-type: application/json; charset=utf-8\n\n{ \n  \"documents\" : [ \n    \"/_db/_system/_api/document/products/1660147067\", \n    \"/_db/_system/_api/document/products/1660474747\", \n    \"/_db/_system/_api/document/products/1659819387\" \n  ] \n}\n</code></pre><br><br><br> Returns all document keys <br><br><br><br><pre><code class=\"json\">shell&gt; curl --dump - http://localhost:8529/_api/document/?collection=products&amp;type=key\n\nHTTP/1.1 200 OK\ncontent-type: application/json; charset=utf-8\n\n{ \n  \"documents\" : [ \n    \"1661064571\", \n    \"1661719931\", \n    \"1661392251\" \n  ] \n}\n</code></pre><br><br><br> Collection does not exist. <br><br><br><br><pre><code class=\"json\">shell&gt; curl --dump - http://localhost:8529/_api/document/?collection=doesnotexist\n\nHTTP/1.1 404 Not Found\ncontent-type: application/json; charset=utf-8\n\n{ \n  \"error\" : true, \n  \"errorMessage\" : \"collection 'doesnotexist' not found\", \n  \"code\" : 404, \n  \"errorNum\" : 1203 \n}\n</code></pre><br><br><br>",
                    "nickname": "ReadAllDocuments"
                }
            ],
            "path": "/_api/document"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "is returned if the document was found <br><br>",
                            "code": "200"
                        },
                        {
                            "reason": "is returned if the \"If-None-Match\" header is given and the document has same version <br><br>",
                            "code": "304"
                        },
                        {
                            "reason": "is returned if the document or collection was not found <br><br>",
                            "code": "404"
                        },
                        {
                            "reason": "is returned if a \"If-Match\" header or <em>rev</em> is given and the found document has a different version. The response will also contain the found document's current revision in the <em>etag</em> header. <br><br>",
                            "code": "412"
                        }
                    ],
                    "parameters": [
                        {
                            "dataType": "String",
                            "paramType": "path",
                            "required": true,
                            "name": "document-handle",
                            "description": "The handle of the document. <br><br>"
                        },
                        {
                            "dataType": "String",
                            "paramType": "query",
                            "required": false,
                            "name": "rev",
                            "description": "You can conditionally fetch a document based on a target revision id by using the <em>rev</em> URL parameter. <br><br>"
                        },
                        {
                            "dataType": "String",
                            "paramType": "header",
                            "name": "If-None-Match",
                            "description": "If the \"If-None-Match\" header is given, then it must contain exactly one etag. If the current document revision is different to the specified etag, an <em>HTTP 200</em> response is returned. If the current document revision is identical to the specified etag, then an <em>HTTP 304</em> is returned. <br><br>"
                        },
                        {
                            "dataType": "String",
                            "paramType": "header",
                            "name": "If-Match",
                            "description": "You can conditionally fetch a document based on a target revision id by using the <em>if-match</em> HTTP header. <br><br>"
                        }
                    ],
                    "notes": "Like <em>GET</em>, but only returns the header fields and not the body. You can use this call to get the current revision of a document or check if the document was deleted. <br><br>",
                    "summary": "Read document header",
                    "httpMethod": "HEAD",
                    "examples": "<br><br><br><br><pre><code class=\"json\">shell&gt; curl -X HEAD --dump - http://localhost:8529/_api/document/products/1662309755\n\n</code></pre><br><br><br> <br><br>",
                    "nickname": "ReadDocumentHeader"
                }
            ],
            "path": "/_api/document/{document-handle}"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "is returned if the document was replaced successfully and <em>waitForSync</em> was <em>true</em>. <br><br>",
                            "code": "201"
                        },
                        {
                            "reason": "is returned if the document was replaced successfully and <em>waitForSync</em> was <em>false</em>. <br><br>",
                            "code": "202"
                        },
                        {
                            "reason": "is returned if the body does not contain a valid JSON representation of a document.  The response body contains an error document in this case. <br><br>",
                            "code": "400"
                        },
                        {
                            "reason": "is returned if the collection or the document was not found <br><br>",
                            "code": "404"
                        },
                        {
                            "reason": "is returned if a \"If-Match\" header or <em>rev</em> is given and the found document has a different version. The response will also contain the found document's current revision in the <em>_rev</em> attribute. Additionally, the attributes <em>_id</em> and <em>_key</em> will be returned. <br><br>",
                            "code": "412"
                        }
                    ],
                    "parameters": [
                        {
                            "dataType": "Json",
                            "paramType": "body",
                            "required": true,
                            "name": "document",
                            "description": "A JSON representation of the new document. <br><br>"
                        },
                        {
                            "dataType": "String",
                            "paramType": "path",
                            "required": true,
                            "name": "document-handle",
                            "description": "The handle of the document. <br><br>"
                        },
                        {
                            "dataType": "Boolean",
                            "paramType": "query",
                            "required": false,
                            "name": "waitForSync",
                            "description": "Wait until document has been synced to disk. <br><br>"
                        },
                        {
                            "dataType": "String",
                            "paramType": "query",
                            "required": false,
                            "name": "rev",
                            "description": "You can conditionally replace a document based on a target revision id by using the <em>rev</em> URL parameter. <br><br>"
                        },
                        {
                            "dataType": "String",
                            "paramType": "query",
                            "required": false,
                            "name": "policy",
                            "description": "To control the update behavior in case there is a revision mismatch, you can use the <em>policy</em> parameter (see below). <br><br>"
                        },
                        {
                            "dataType": "String",
                            "paramType": "header",
                            "name": "If-Match",
                            "description": "You can conditionally replace a document based on a target revision id by using the <em>if-match</em> HTTP header. <br><br>"
                        }
                    ],
                    "notes": "Completely updates (i.e. replaces) the document identified by <em>document-handle</em>. If the document exists and can be updated, then a <em>HTTP 201</em> is returned and the \"ETag\" header field contains the new revision of the document. <br><br> If the new document passed in the body of the request contains the <em>document-handle</em> in the attribute <em>_id</em> and the revision in <em>_rev</em>, these attributes will be ignored. Only the URI and the \"ETag\" header are relevant in order to avoid confusion when using proxies. <br><br> Optionally, the URL parameter <em>waitForSync</em> can be used to force synchronisation of the document replacement operation to disk even in case that the <em>waitForSync</em> flag had been disabled for the entire collection. Thus, the <em>waitForSync</em> URL parameter can be used to force synchronisation of just specific operations. To use this, set the <em>waitForSync</em> parameter to <em>true</em>. If the <em>waitForSync</em> parameter is not specified or set to <em>false</em>, then the collection's default <em>waitForSync</em> behavior is applied. The <em>waitForSync</em> URL parameter cannot be used to disable synchronisation for collections that have a default <em>waitForSync</em> value of <em>true</em>. <br><br> The body of the response contains a JSON object with the information about the handle and the revision. The attribute <em>_id</em> contains the known <em>document-handle</em> of the updated document, <em>_key</em> contains the key which  uniquely identifies a document in a given collection, and the attribute <em>_rev</em> contains the new document revision. <br><br> If the document does not exist, then a <em>HTTP 404</em> is returned and the body of the response contains an error document. <br><br> There are two ways for specifying the targeted document revision id for conditional replacements (i.e. replacements that will only be executed if the revision id found in the database matches the document revision id specified in the request):  <ul class=\"swagger-list\"><li>specifying the target revision in the <em>rev</em> URL query parameter <li>specifying the target revision in the <em>if-match</em> HTTP header  </ul> Specifying a target revision is optional, however, if done, only one of the described mechanisms must be used (either the <em>rev</em> URL parameter or the <em>if-match</em> HTTP header). Regardless which mechanism is used, the parameter needs to contain the target document revision id as returned in the <em>_rev</em> attribute of a document or by an HTTP <em>etag</em> header. <br><br> For example, to conditionally replace a document based on a specific revision id, you can use the following request: <br><br> <em>PUT /_api/document/document-handle?rev=etag</em> <br><br> If a target revision id is provided in the request (e.g. via the <em>etag</em> value in the <em>rev</em> URL query parameter above), ArangoDB will check that the revision id of the document found in the database is equal to the target revision id provided in the request. If there is a mismatch between the revision id, then by default a <em>HTTP 412</em> conflict is returned and no replacement is performed. <br><br> The conditional update behavior can be overriden with the <em>policy</em> URL query parameter: <br><br> <em>PUT /_api/document/document-handle?policy=policy</em> <br><br> If <em>policy</em> is set to <em>error</em>, then the behavior is as before: replacements will fail if the revision id found in the database does not match the target revision id specified in the request. <br><br> If <em>policy</em> is set to <em>last</em>, then the replacement will succeed, even if the revision id found in the database does not match the target revision id specified in the request. You can use the <em>last</em> *policy* to force replacements. <br><br>",
                    "summary": "Replace document",
                    "httpMethod": "PUT",
                    "examples": "<br><br> Using document handle: <br><br><br><br><pre><code class=\"json\">shell&gt; curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/document/products/1662899579 &lt;&lt;EOF\n{\"Hello\": \"you\"}\nEOF\n\nHTTP/1.1 202 Accepted\ncontent-type: application/json; charset=utf-8\netag: \"1663227259\"\nlocation: /_db/_system/_api/document/products/1662899579\n\n{ \n  \"error\" : false, \n  \"_id\" : \"products/1662899579\", \n  \"_rev\" : \"1663227259\", \n  \"_key\" : \"1662899579\" \n}\n</code></pre><br><br><br> Unknown document handle: <br><br><br><br><pre><code class=\"json\">shell&gt; curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/document/products/1663751547 &lt;&lt;EOF\n{}\nEOF\n\nHTTP/1.1 404 Not Found\ncontent-type: application/json; charset=utf-8\n\n{ \n  \"error\" : true, \n  \"errorMessage\" : \"document not found\", \n  \"code\" : 404, \n  \"errorNum\" : 1202 \n}\n</code></pre><br><br><br> Produce a revision conflict: <br><br><br><br><pre><code class=\"json\">shell&gt; curl -X PUT --header 'If-Match: \"1664996731\"' --data-binary @- --dump - http://localhost:8529/_api/document/products/1664669051 &lt;&lt;EOF\n{\"other\":\"content\"}\nEOF\n\nHTTP/1.1 412 Precondition Failed\ncontent-type: application/json; charset=utf-8\netag: \"1664669051\"\n\n{ \n  \"error\" : true, \n  \"code\" : 412, \n  \"errorNum\" : 1200, \n  \"errorMessage\" : \"precondition failed\", \n  \"_id\" : \"products/1664669051\", \n  \"_rev\" : \"1664669051\", \n  \"_key\" : \"1664669051\" \n}\n</code></pre><br><br><br> Last write wins: <br><br><br><br><pre><code class=\"json\">shell&gt; curl -X PUT --header 'If-Match: \"1666110843\"' --data-binary @- --dump - http://localhost:8529/_api/document/products/1665783163?policy=last &lt;&lt;EOF\n{}\nEOF\n\nHTTP/1.1 202 Accepted\ncontent-type: application/json; charset=utf-8\netag: \"1666372987\"\nlocation: /_db/_system/_api/document/products/1665783163\n\n{ \n  \"error\" : false, \n  \"_id\" : \"products/1665783163\", \n  \"_rev\" : \"1666372987\", \n  \"_key\" : \"1665783163\" \n}\n</code></pre><br><br><br> Alternative to header field: <br><br><br><br><pre><code class=\"json\">shell&gt; curl -X PUT --data-binary @- --dump - http://localhost:8529/_api/document/products/1666897275?rev=1667224955 &lt;&lt;EOF\n{\"other\":\"content\"}\nEOF\n\nHTTP/1.1 412 Precondition Failed\ncontent-type: application/json; charset=utf-8\netag: \"1666897275\"\n\n{ \n  \"error\" : true, \n  \"code\" : 412, \n  \"errorNum\" : 1200, \n  \"errorMessage\" : \"precondition failed\", \n  \"_id\" : \"products/1666897275\", \n  \"_rev\" : \"1666897275\", \n  \"_key\" : \"1666897275\" \n}\n</code></pre><br><br><br>",
                    "nickname": "ReplaceDocument"
                }
            ],
            "path": "/_api/document/{document-handle}"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "is returned if the document was created successfully and <em>waitForSync</em> was <em>true</em>. <br><br>",
                            "code": "201"
                        },
                        {
                            "reason": "is returned if the document was created successfully and <em>waitForSync</em> was <em>false</em>. <br><br>",
                            "code": "202"
                        },
                        {
                            "reason": "is returned if the body does not contain a valid JSON representation of a document. The response body contains an error document in this case. <br><br>",
                            "code": "400"
                        },
                        {
                            "reason": "is returned if the collection or the document was not found <br><br>",
                            "code": "404"
                        },
                        {
                            "reason": "is returned if a \"If-Match\" header or <em>rev</em> is given and the found document has a different version. The response will also contain the found document's current revision in the <em>_rev</em> attribute. Additionally, the attributes <em>_id</em> and <em>_key</em> will be returned. <br><br>",
                            "code": "412"
                        }
                    ],
                    "parameters": [
                        {
                            "dataType": "Json",
                            "paramType": "body",
                            "required": true,
                            "name": "document",
                            "description": "A JSON representation of the document update. <br><br>"
                        },
                        {
                            "dataType": "String",
                            "paramType": "path",
                            "required": true,
                            "name": "document-handle",
                            "description": "The handle of the document. <br><br>"
                        },
                        {
                            "dataType": "Boolean",
                            "paramType": "query",
                            "required": false,
                            "name": "keepNull",
                            "description": "If the intention is to delete existing attributes with the patch command, the URL query parameter <em>keepNull</em> can be used with a value of <em>false</em>. This will modify the behavior of the patch command to remove any attributes from the existing document that are contained in the patch document with an attribute value of <em>null</em>. <br><br>"
                        },
                        {
                            "dataType": "Boolean",
                            "paramType": "query",
                            "required": false,
                            "name": "mergeObjects",
                            "description": "Controls whether objects (not arrays) will be merged if present in both the existing and the patch document. If set to <em>false</em>, the value in the patch document will overwrite the existing document's value. If set to <em>true</em>, objects will be merged. The default is <em>true</em>. <br><br>"
                        },
                        {
                            "dataType": "Boolean",
                            "paramType": "query",
                            "required": false,
                            "name": "waitForSync",
                            "description": "Wait until document has been synced to disk. <br><br>"
                        },
                        {
                            "dataType": "String",
                            "paramType": "query",
                            "required": false,
                            "name": "rev",
                            "description": "You can conditionally patch a document based on a target revision id by using the <em>rev</em> URL parameter. <br><br>"
                        },
                        {
                            "dataType": "String",
                            "paramType": "query",
                            "required": false,
                            "name": "policy",
                            "description": "To control the update behavior in case there is a revision mismatch, you can use the <em>policy</em> parameter. <br><br>"
                        },
                        {
                            "dataType": "String",
                            "paramType": "header",
                            "name": "If-Match",
                            "description": "You can conditionally patch a document based on a target revision id by using the <em>if-match</em> HTTP header. <br><br>"
                        }
                    ],
                    "notes": "Partially updates the document identified by <em>document-handle</em>. The body of the request must contain a JSON document with the attributes to patch (the patch document). All attributes from the patch document will be added to the existing document if they do not yet exist, and overwritten in the existing document if they do exist there. <br><br> Setting an attribute value to <em>null</em> in the patch document will cause a value of <em>null</em> be saved for the attribute by default. <br><br> Optionally, the URL parameter <em>waitForSync</em> can be used to force synchronisation of the document update operation to disk even in case that the <em>waitForSync</em> flag had been disabled for the entire collection. Thus, the <em>waitForSync</em> URL parameter can be used to force synchronisation of just specific operations. To use this, set the <em>waitForSync</em> parameter to <em>true</em>. If the <em>waitForSync</em> parameter is not specified or set to <em>false</em>, then the collection's default <em>waitForSync</em> behavior is applied. The <em>waitForSync</em> URL parameter cannot be used to disable synchronisation for collections that have a default <em>waitForSync</em> value of <em>true</em>. <br><br> The body of the response contains a JSON object with the information about the handle and the revision. The attribute <em>_id</em> contains the known <em>document-handle</em> of the updated document, <em>_key</em> contains the key which  uniquely identifies a document in a given collection, and the attribute <em>_rev</em> contains the new document revision. <br><br> If the document does not exist, then a <em>HTTP 404</em> is returned and the body of the response contains an error document. <br><br> You can conditionally update a document based on a target revision id by using either the <em>rev</em> URL parameter or the <em>if-match</em> HTTP header. To control the update behavior in case there is a revision mismatch, you can use the <em>policy</em> parameter. This is the same as when replacing documents (see replacing documents for details). <br><br>",
                    "summary": " Patch document",
                    "httpMethod": "PATCH",
                    "examples": "<br><br> patches an existing document with new content. <br><br><br><br><pre><code class=\"json\">shell&gt; curl -X PATCH --data-binary @- --dump - http://localhost:8529/_api/document/products/1668011387 &lt;&lt;EOF\n{ \n  \"hello\" : \"world\" \n}\nEOF\n\nHTTP/1.1 202 Accepted\ncontent-type: application/json; charset=utf-8\netag: \"1668339067\"\nlocation: /_db/_system/_api/document/products/1668011387\n\n{ \n  \"error\" : false, \n  \"_id\" : \"products/1668011387\", \n  \"_rev\" : \"1668339067\", \n  \"_key\" : \"1668011387\" \n}\nshell&gt; curl -X PATCH --data-binary @- --dump - http://localhost:8529/_api/document/products/1668011387 &lt;&lt;EOF\n{ \n  \"numbers\" : { \n    \"one\" : 1, \n    \"two\" : 2, \n    \"three\" : 3, \n    \"empty\" : null \n  } \n}\nEOF\n\nHTTP/1.1 202 Accepted\ncontent-type: application/json; charset=utf-8\netag: \"1668928891\"\nlocation: /_db/_system/_api/document/products/1668011387\n\n{ \n  \"error\" : false, \n  \"_id\" : \"products/1668011387\", \n  \"_rev\" : \"1668928891\", \n  \"_key\" : \"1668011387\" \n}\nshell&gt; curl --dump - http://localhost:8529/_api/document/products/1668011387\n\nHTTP/1.1 200 OK\ncontent-type: application/json; charset=utf-8\netag: \"1668928891\"\n\n{ \n  \"one\" : \"world\", \n  \"hello\" : \"world\", \n  \"numbers\" : { \n    \"empty\" : null, \n    \"one\" : 1, \n    \"two\" : 2, \n    \"three\" : 3 \n  }, \n  \"_id\" : \"products/1668011387\", \n  \"_rev\" : \"1668928891\", \n  \"_key\" : \"1668011387\" \n}\nshell&gt; curl -X PATCH --data-binary @- --dump - http://localhost:8529/_api/document/products/1668011387?keepNull=false &lt;&lt;EOF\n{ \n  \"hello\" : null, \n  \"numbers\" : { \n    \"four\" : 4 \n  } \n}\nEOF\n\nHTTP/1.1 202 Accepted\ncontent-type: application/json; charset=utf-8\netag: \"1669387643\"\nlocation: /_db/_system/_api/document/products/1668011387\n\n{ \n  \"error\" : false, \n  \"_id\" : \"products/1668011387\", \n  \"_rev\" : \"1669387643\", \n  \"_key\" : \"1668011387\" \n}\nshell&gt; curl --dump - http://localhost:8529/_api/document/products/1668011387\n\nHTTP/1.1 200 OK\ncontent-type: application/json; charset=utf-8\netag: \"1669387643\"\n\n{ \n  \"one\" : \"world\", \n  \"numbers\" : { \n    \"empty\" : null, \n    \"one\" : 1, \n    \"two\" : 2, \n    \"three\" : 3, \n    \"four\" : 4 \n  }, \n  \"_id\" : \"products/1668011387\", \n  \"_rev\" : \"1669387643\", \n  \"_key\" : \"1668011387\" \n}\n</code></pre><br><br><br> Merging attributes of an object using <em>mergeObjects</em>: <br><br><br><br><pre><code class=\"json\">shell&gt; curl --dump - http://localhost:8529/_api/document/products/1670239611\n\nHTTP/1.1 200 OK\ncontent-type: application/json; charset=utf-8\netag: \"1670239611\"\n\n{ \n  \"inhabitants\" : { \n    \"china\" : 1366980000, \n    \"india\" : 1263590000, \n    \"usa\" : 319220000 \n  }, \n  \"_id\" : \"products/1670239611\", \n  \"_rev\" : \"1670239611\", \n  \"_key\" : \"1670239611\" \n}\nshell&gt; curl -X PATCH --data-binary @- --dump - http://localhost:8529/_api/document/products/1670239611?mergeObjects=true &lt;&lt;EOF\n{ \n  \"inhabitants\" : { \n    \"indonesia\" : 252164800, \n    \"brazil\" : 203553000 \n  } \n}\nEOF\n\nshell&gt; curl --dump - http://localhost:8529/_api/document/products/1670239611\n\nHTTP/1.1 200 OK\ncontent-type: application/json; charset=utf-8\netag: \"1670763899\"\n\n{ \n  \"inhabitants\" : { \n    \"china\" : 1366980000, \n    \"india\" : 1263590000, \n    \"usa\" : 319220000, \n    \"indonesia\" : 252164800, \n    \"brazil\" : 203553000 \n  }, \n  \"_id\" : \"products/1670239611\", \n  \"_rev\" : \"1670763899\", \n  \"_key\" : \"1670239611\" \n}\nshell&gt; curl -X PATCH --data-binary @- --dump - http://localhost:8529/_api/document/products/1670239611?mergeObjects=false &lt;&lt;EOF\n{ \n  \"inhabitants\" : { \n    \"pakistan\" : 188346000 \n  } \n}\nEOF\n\nHTTP/1.1 202 Accepted\ncontent-type: application/json; charset=utf-8\netag: \"1671222651\"\nlocation: /_db/_system/_api/document/products/1670239611\n\n{ \n  \"error\" : false, \n  \"_id\" : \"products/1670239611\", \n  \"_rev\" : \"1671222651\", \n  \"_key\" : \"1670239611\" \n}\nshell&gt; curl --dump - http://localhost:8529/_api/document/products/1670239611\n\nHTTP/1.1 200 OK\ncontent-type: application/json; charset=utf-8\netag: \"1671222651\"\n\n{ \n  \"inhabitants\" : { \n    \"pakistan\" : 188346000 \n  }, \n  \"_id\" : \"products/1670239611\", \n  \"_rev\" : \"1671222651\", \n  \"_key\" : \"1670239611\" \n}\n</code></pre><br><br><br>",
                    "nickname": "PatchDocument"
                }
            ],
            "path": "/_api/document/{document-handle}"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "is returned if the document was removed successfully and <em>waitForSync</em> was <em>true</em>. <br><br>",
                            "code": "200"
                        },
                        {
                            "reason": "is returned if the document was removed successfully and <em>waitForSync</em> was <em>false</em>. <br><br>",
                            "code": "202"
                        },
                        {
                            "reason": "is returned if the collection or the document was not found. The response body contains an error document in this case. <br><br>",
                            "code": "404"
                        },
                        {
                            "reason": "is returned if a \"If-Match\" header or <em>rev</em> is given and the found document has a different version. The response will also contain the found document's current revision in the <em>_rev</em> attribute. Additionally, the attributes <em>_id</em> and <em>_key</em> will be returned. <br><br>",
                            "code": "412"
                        }
                    ],
                    "parameters": [
                        {
                            "dataType": "String",
                            "paramType": "path",
                            "required": true,
                            "name": "document-handle",
                            "description": "Removes the document identified by <em>document-handle</em>. <br><br>"
                        },
                        {
                            "dataType": "String",
                            "paramType": "query",
                            "required": false,
                            "name": "rev",
                            "description": "You can conditionally remove a document based on a target revision id by using the <em>rev</em> URL parameter. <br><br>"
                        },
                        {
                            "dataType": "String",
                            "paramType": "query",
                            "required": false,
                            "name": "policy",
                            "description": "To control the update behavior in case there is a revision mismatch, you can use the <em>policy</em> parameter. This is the same as when replacing documents (see replacing documents for more details). <br><br>"
                        },
                        {
                            "dataType": "Boolean",
                            "paramType": "query",
                            "required": false,
                            "name": "waitForSync",
                            "description": "Wait until deletion operation has been synced to disk. <br><br>"
                        },
                        {
                            "dataType": "String",
                            "paramType": "header",
                            "name": "If-Match",
                            "description": "You can conditionally remove a document based on a target revision id by using the <em>if-match</em> HTTP header. <br><br>"
                        }
                    ],
                    "notes": "The body of the response contains a JSON object with the information about the handle and the revision. The attribute <em>_id</em> contains the known <em>document-handle</em> of the removed document, <em>_key</em> contains the key which  uniquely identifies a document in a given collection, and the attribute <em>_rev</em> contains the new document revision. <br><br> If the <em>waitForSync</em> parameter is not specified or set to <em>false</em>, then the collection's default <em>waitForSync</em> behavior is applied. The <em>waitForSync</em> URL parameter cannot be used to disable synchronisation for collections that have a default <em>waitForSync</em> value of <em>true</em>. <br><br>",
                    "summary": " Removes a document",
                    "httpMethod": "DELETE",
                    "examples": "<br><br> Using document handle: <br><br><br><br><pre><code class=\"json\">shell&gt; curl -X DELETE --dump - http://localhost:8529/_api/document/products/1671812475\n\nHTTP/1.1 200 OK\ncontent-type: application/json; charset=utf-8\n\n{ \n  \"error\" : false, \n  \"_id\" : \"products/1671812475\", \n  \"_rev\" : \"1671812475\", \n  \"_key\" : \"1671812475\" \n}\n</code></pre><br><br><br> Unknown document handle: <br><br><br><br><pre><code class=\"json\">shell&gt; curl -X DELETE --dump - http://localhost:8529/_api/document/products/1672533371\n\nHTTP/1.1 404 Not Found\ncontent-type: application/json; charset=utf-8\n\n{ \n  \"error\" : true, \n  \"errorMessage\" : \"document not found\", \n  \"code\" : 404, \n  \"errorNum\" : 1202 \n}\n</code></pre><br><br><br> Revision conflict: <br><br><br><br><pre><code class=\"json\">shell&gt; curl -X DELETE --header 'If-Match: \"1673713019\"' --dump - http://localhost:8529/_api/document/products/1673385339\n\nHTTP/1.1 412 Precondition Failed\ncontent-type: application/json; charset=utf-8\netag: \"1673385339\"\n\n{ \n  \"error\" : true, \n  \"code\" : 412, \n  \"errorNum\" : 1200, \n  \"errorMessage\" : \"precondition failed\", \n  \"_id\" : \"products/1673385339\", \n  \"_rev\" : \"1673385339\", \n  \"_key\" : \"1673385339\" \n}\n</code></pre><br><br><br>",
                    "nickname": "RemovesADocument"
                }
            ],
            "path": "/_api/document/{document-handle}"
        }
    ]
}
