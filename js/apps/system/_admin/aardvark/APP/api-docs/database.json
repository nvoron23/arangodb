{
    "basePath": "/",
    "swaggerVersion": "1.1",
    "apiVersion": "0.1",
    "apis": [
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "is returned if the list of database was compiled successfully. <br><br>",
                            "code": "200"
                        },
                        {
                            "reason": "is returned if the request is invalid. <br><br>",
                            "code": "400"
                        },
                        {
                            "reason": "is returned if the request was not executed in the <em>_system</em> database. <br><br>",
                            "code": "403"
                        }
                    ],
                    "parameters": [],
                    "notes": "Retrieves the list of all existing databases <br><br> <em>Note</em>: retrieving the list of databases is only possible from within the <em>_system</em> database. <br><br>",
                    "summary": " List of databases",
                    "httpMethod": "GET",
                    "examples": "<br><br><br><br><pre><code class=\"json\">shell&gt; curl --dump - http:<span class=\"hljs-comment\">//localhost:8529/_api/database</span>\n\nHTTP/<span class=\"hljs-number\">1.1</span> <span class=\"hljs-number\">200</span> OK\ncontent-type: application/json; charset=utf-<span class=\"hljs-number\">8</span>\n\n{ \n  <span class=\"hljs-string\">\"result\"</span> : [ \n    <span class=\"hljs-string\">\"_system\"</span> \n  ], \n  <span class=\"hljs-string\">\"error\"</span> : <span class=\"hljs-literal\">false</span>, \n  <span class=\"hljs-string\">\"code\"</span> : <span class=\"hljs-number\">200</span> \n}\n</code></pre><br><br><br>",
                    "nickname": "ListOfDatabases"
                }
            ],
            "path": "/_api/database"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "is returned if the list of database was compiled successfully. <br><br>",
                            "code": "200"
                        },
                        {
                            "reason": "is returned if the request is invalid. <br><br>",
                            "code": "400"
                        }
                    ],
                    "parameters": [],
                    "notes": "Retrieves the list of all databases the current user can access without specifying a different username or password. <br><br>",
                    "summary": " List of accessible databases ",
                    "httpMethod": "GET",
                    "examples": "<br><br><br><br><pre><code class=\"json\">shell&gt; curl --dump - http:<span class=\"hljs-comment\">//localhost:8529/_api/database/user</span>\n\nHTTP/<span class=\"hljs-number\">1.1</span> <span class=\"hljs-number\">200</span> OK\ncontent-type: application/json; charset=utf-<span class=\"hljs-number\">8</span>\n\n{ \n  <span class=\"hljs-string\">\"result\"</span> : [ \n    <span class=\"hljs-string\">\"_system\"</span> \n  ], \n  <span class=\"hljs-string\">\"error\"</span> : <span class=\"hljs-literal\">false</span>, \n  <span class=\"hljs-string\">\"code\"</span> : <span class=\"hljs-number\">200</span> \n}\n</code></pre><br><br><br>",
                    "nickname": "ListOfAccessibleDatabases"
                }
            ],
            "path": "/_api/database/user"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "is returned if the information was retrieved successfully. <br><br>",
                            "code": "200"
                        },
                        {
                            "reason": "is returned if the request is invalid. <br><br>",
                            "code": "400"
                        },
                        {
                            "reason": "is returned if the database could not be found. <br><br>",
                            "code": "404"
                        }
                    ],
                    "parameters": [],
                    "notes": "Retrieves information about the current database <br><br> The response is a JSON object with the following attributes: <br><br>  <ul class=\"swagger-list\"><li><em>name</em>: the name of the current database  <li><em>id</em>: the id of the current database  <li><em>path</em>: the filesystem path of the current database  <li><em>isSystem</em>: whether or not the current database is the <em>_system</em> database",
                    "summary": " Information of the database",
                    "httpMethod": "GET",
                    "examples": "<br><br><br><br><pre><code class=\"json\">shell&gt; curl --dump - http:<span class=\"hljs-comment\">//localhost:8529/_api/database/current</span>\n\nHTTP/<span class=\"hljs-number\">1.1</span> <span class=\"hljs-number\">200</span> OK\ncontent-type: application/json; charset=utf-<span class=\"hljs-number\">8</span>\n\n{ \n  <span class=\"hljs-string\">\"result\"</span> : { \n    <span class=\"hljs-string\">\"name\"</span> : <span class=\"hljs-string\">\"_system\"</span>, \n    <span class=\"hljs-string\">\"id\"</span> : <span class=\"hljs-string\">\"114652\"</span>, \n    <span class=\"hljs-string\">\"path\"</span> : <span class=\"hljs-string\">\"/tmp/vocdir.73313/databases/database-114652\"</span>, \n    <span class=\"hljs-string\">\"isSystem\"</span> : <span class=\"hljs-literal\">true</span> \n  }, \n  <span class=\"hljs-string\">\"error\"</span> : <span class=\"hljs-literal\">false</span>, \n  <span class=\"hljs-string\">\"code\"</span> : <span class=\"hljs-number\">200</span> \n}\n</code></pre><br><br><br>",
                    "nickname": "InformationOfTheDatabase"
                }
            ],
            "path": "/_api/database/current"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "is returned if the database was created successfully. <br><br>",
                            "code": "201"
                        },
                        {
                            "reason": "is returned if the request parameters are invalid or if a database with the specified name already exists. <br><br>",
                            "code": "400"
                        },
                        {
                            "reason": "is returned if the request was not executed in the <em>_system</em> database. <br><br>",
                            "code": "403"
                        },
                        {
                            "reason": "is returned if a database with the specified name already exists. <br><br>",
                            "code": "409"
                        }
                    ],
                    "parameters": [
                        {
                            "dataType": "Json",
                            "paramType": "body",
                            "required": true,
                            "name": "body",
                            "description": "the body with the name of the database. <br><br>"
                        }
                    ],
                    "notes": "Creates a new database <br><br> The request body must be a JSON object with the attribute <em>name</em>. <em>name</em> must contain a valid database name. <br><br> The request body can optionally contain an attribute <em>users</em>, which then must be a list of user objects to initially create for the new database. Each user object can contain the following attributes: <br><br>  <ul class=\"swagger-list\"><li><em>username</em>: the user name as a string. This attribute is mandatory.  <li><em>passwd</em>: the user password as a string. If not specified, then it defaults to the empty string.  <li><em>active</em>: a boolean flag indicating whether the user accout should be actived or not. The default value is <em>true</em>.  <li><em>extra</em>: an optional JSON object with extra user information. The data contained in <em>extra</em> will be stored for the user but not be interpreted further by ArangoDB.  </ul> If <em>users</em> is not specified or does not contain any users, a default user <em>root</em> will be created with an empty string password. This ensures that the new database will be accessible after it is created. <br><br> The response is a JSON object with the attribute <em>result</em> set to <em>true</em>. <br><br> <em>Note</em>: creating a new database is only possible from within the <em>_system</em> database. <br><br>",
                    "summary": " Create database",
                    "httpMethod": "POST",
                    "examples": "<br><br> Creating a database named <em>example</em>. <br><br><br><br><pre><code class=\"json\">shell&gt; curl -X POST --data-binary @- --dump - http:<span class=\"hljs-comment\">//localhost:8529/_api/database &lt;&lt;EOF</span>\n{<span class=\"hljs-string\">\"name\"</span>:<span class=\"hljs-string\">\"example\"</span>}\nEOF\n\nHTTP/<span class=\"hljs-number\">1.1</span> <span class=\"hljs-number\">201</span> Created\ncontent-type: application/json; charset=utf-<span class=\"hljs-number\">8</span>\n\n{ \n  <span class=\"hljs-string\">\"result\"</span> : <span class=\"hljs-literal\">true</span>, \n  <span class=\"hljs-string\">\"error\"</span> : <span class=\"hljs-literal\">false</span>, \n  <span class=\"hljs-string\">\"code\"</span> : <span class=\"hljs-number\">201</span> \n}\n</code></pre><br><br><br> Creating a database named <em>mydb</em> with two users. <br><br><br><br><pre><code class=\"json\">shell&gt; curl -X POST --data-binary @- --dump - http:<span class=\"hljs-comment\">//localhost:8529/_api/database &lt;&lt;EOF</span>\n{<span class=\"hljs-string\">\"name\"</span>:<span class=\"hljs-string\">\"mydb\"</span>,<span class=\"hljs-string\">\"users\"</span>:[{<span class=\"hljs-string\">\"username\"</span>:<span class=\"hljs-string\">\"admin\"</span>,<span class=\"hljs-string\">\"passwd\"</span>:<span class=\"hljs-string\">\"secret\"</span>,<span class=\"hljs-string\">\"active\"</span>:<span class=\"hljs-literal\">true</span>},{<span class=\"hljs-string\">\"username\"</span>:<span class=\"hljs-string\">\"tester\"</span>,<span class=\"hljs-string\">\"passwd\"</span>:<span class=\"hljs-string\">\"test001\"</span>,<span class=\"hljs-string\">\"active\"</span>:<span class=\"hljs-literal\">false</span>}]}\nEOF\n\nHTTP/<span class=\"hljs-number\">1.1</span> <span class=\"hljs-number\">201</span> Created\ncontent-type: application/json; charset=utf-<span class=\"hljs-number\">8</span>\n\n{ \n  <span class=\"hljs-string\">\"result\"</span> : <span class=\"hljs-literal\">true</span>, \n  <span class=\"hljs-string\">\"error\"</span> : <span class=\"hljs-literal\">false</span>, \n  <span class=\"hljs-string\">\"code\"</span> : <span class=\"hljs-number\">201</span> \n}\n</code></pre><br><br><br>",
                    "nickname": "CreateDatabase"
                }
            ],
            "path": "/_api/database"
        },
        {
            "operations": [
                {
                    "errorResponses": [
                        {
                            "reason": "is returned if the database was dropped successfully. <br><br>",
                            "code": "200"
                        },
                        {
                            "reason": "is returned if the request is malformed. <br><br>",
                            "code": "400"
                        },
                        {
                            "reason": "is returned if the request was not executed in the <em>_system</em> database. <br><br>",
                            "code": "403"
                        },
                        {
                            "reason": "is returned if the database could not be found. <br><br>",
                            "code": "404"
                        }
                    ],
                    "parameters": [
                        {
                            "dataType": "String",
                            "paramType": "path",
                            "required": true,
                            "name": "database-name",
                            "description": "The name of the database <br><br>"
                        }
                    ],
                    "notes": "Drops the database along with all data stored in it. <br><br> <em>Note</em>: dropping a database is only possible from within the <em>_system</em> database. The <em>_system</em> database itself cannot be dropped. <br><br>",
                    "summary": " Drop database",
                    "httpMethod": "DELETE",
                    "examples": "<br><br><br><br><pre><code class=\"json\">shell&gt; curl -X DELETE --dump - http:<span class=\"hljs-comment\">//localhost:8529/_api/database/example</span>\n\nHTTP/<span class=\"hljs-number\">1.1</span> <span class=\"hljs-number\">200</span> OK\ncontent-type: application/json; charset=utf-<span class=\"hljs-number\">8</span>\n\n{ \n  <span class=\"hljs-string\">\"result\"</span> : <span class=\"hljs-literal\">true</span>, \n  <span class=\"hljs-string\">\"error\"</span> : <span class=\"hljs-literal\">false</span>, \n  <span class=\"hljs-string\">\"code\"</span> : <span class=\"hljs-number\">200</span> \n}\n</code></pre><br><br><br>",
                    "nickname": "DropDatabase"
                }
            ],
            "path": "/_api/database/{database-name}"
        }
    ]
}
